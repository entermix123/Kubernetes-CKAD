CONTENT

Section 12 171. Kubernetes Challanges


=====================================
Section 12 171. Kubernetes Challanges
=====================================


===========================
Lab- Kubernetes Challenge 1
===========================


1. Deploy the given architecture diagram for implementing a Jekyll SSG.
-----------------------------------------------------------------------
Click on each icon (including arrows) to see more details. Once done click on the Check button to test your work.

Martin:
=======
- Build user information for martin in the default kubeconfig file: User = martin , client-key = /root/martin.key and client-certificate = /root/martin.crt (Ensure don't embed within the kubeconfig file)
- Create a new context called 'developer' in the default kubeconfig file with 'user = martin' and 'cluster = kubernetes'

Print current kubeconfig file
	terminal --> kubectl config view

# result:
--------------------------------------------------
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: DATA+OMITTED
    server: https://controlplane:6443
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: kubernetes-admin
  name: kubernetes-admin@kubernetes
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: {}
users:
- name: kubernetes-admin
  user:
    client-certificate-data: DATA+OMITTED
    client-key-data: DATA+OMITTED
--------------------------------------------------

Edit the kubeconfig file
	terminal --> k edit 



Role:
=====
- 'developer-role', should have all(*) permissions for services in development namespace
- 'developer-role', should have all permissions(*) for persistentvolumeclaims in development namespace
- 'developer-role', should have all(*) permissions for pods in development namespace






Role Binding:
=============
- create rolebinding = developer-rolebinding, role= 'developer-role', namespace = development
- rolebinding = developer-rolebinding associated with user = 'martin'


User context:
=============
- set context 'developer' with user = 'martin' and cluster = 'kubernetes' as the current context.


Service:
========
- Service 'jekyll' uses targetPort: '4000', namespace: 'development'
- Service 'jekyll' uses Port: '8080', namespace: 'development'
- Service 'jekyll' uses NodePort: '30097', namespace: 'development'


POD:
====
- pod: 'jekyll' has an initContainer, name: 'copy-jekyll-site', image: 'gcr.io/kodekloud/customimage/jekyll'
- initContainer: 'copy-jekyll-site', command: [ "jekyll", "new", "/site" ] (command to run: jekyll new /site)
- pod: 'jekyll', initContainer: 'copy-jekyll-site', mountPath = '/site'
- pod: 'jekyll', initContainer: 'copy-jekyll-site', volume name = 'site'
- pod: 'jekyll', container: 'jekyll', volume name = 'site'
- pod: 'jekyll', container: 'jekyll', mountPath = '/site'
- pod: 'jekyll', container: 'jekyll', image = 'gcr.io/kodekloud/customimage/jekyll-serve'
- pod: 'jekyll', uses volume called 'site' with pvc = 'jekyll-site'
- pod: 'jekyll' uses label 'run=jekyll'


PVC:
====
- Storage Request: 1Gi
- Access modes: ReadWriteMany
- pvc name = jekyll-site, namespace = development
- 'jekyll-site' PVC should be bound to the PersistentVolume called 'jekyll-site'.


PV:
===
- jekyll-site pv is already created. Inspect it before you create the pvc.





















